#!/bin/bash
#
SCRIPT_NAME="test"
SCRIPT_PREFIX=""
SCRIPT_VERSION="0.1"
SCRIPT_DESCRIPTION="simple bash test framwork"
SCRIPT_PACKAGE="bash_include"
SCRIPT_API="0"

testcase_begin() {
	local IFS=$'\n'
	_test_resetTestCaseVariables
	_test_setupTestStage
}

testcase_end() {
	_test_runTestFunctions
	(( ! _test_failedCount ))
}

testdata() {
	_test_data[$1]="$(</dev/stdin)"
	_test_exit_on_error "$( eval _test_dataset=( "${_test_data[$1]}" ) 2>&1 )"
}

_test_exit_on_error() {
	(( $? == 0 )) && return
	for (( i = ${#BASH_SOURCE[@]} - 1; i > 0; --i )); do
		printf '%s\n\t' "${BASH_SOURCE[i]}:${BASH_LINENO[i-1]}"
	done
	printf '%s\n' "${1//
/
	}"
	exit 1
} 2>&1

_test_setupTestStage() {
	local IFS=$'\n'
	for line in $(declare -p -F); do
		local function="${line#declare -f }" #"
		test "test_" == "${function::5}" || continue
		unset -f $function
	done
	unset _test_data
	declare -gA _test_data
}

_test_resetTestCaseVariables() {
	unset ${!_test_*}
	_test_RED=$'\033[31m'
	_test_GREEN=$'\033[32m'
	_test_YELLOW=$'\033[33m'
	_test_RESET_COLOR=$'\033[39m'
	_test_PASSED="${_test_GREEN}passed${_test_RESET_COLOR}"
	_test_FAILED="${_test_RED}failed${_test_RESET_COLOR}"
	_test_SKIPPED="${_test_YELLOW}skipped${_test_RESET_COLOR}"
	_test_failedCount=0
	_test_passedCount=0
	_test_skippedCount=0
	_test_runCount=0
}

_test_runTestFunctions() {
	local _test_IFS="$IFS" _test_dataset _test_dataline
	local IFS=$'\n'
	for line in $(declare -p -F); do
		local function="${line#declare -f }"
		test "test_" == "${function::5}" || continue
		while read -r _test_dataline; do
			IFS=$'\t\n ' eval _test_dataset=( ${_test_dataline} )
			(( ++_test_runCount ))
			if (( _test_stageFailed )); then
				(( ++_test_skippedCount ))
				printf '%s %s.\n' "${function:5}" "${_test_SKIPPED}"
			else
				IFS="$_test_IFS" _test_runTest "${_test_dataline}" "$function" "${_test_dataset[@]}"
			fi
		done <<< "${_test_data[${function:5}]}"
	done
	_test_stageFailed=${_test_failedCount}
}

_test_runTest() {
	local _test_output _test_result _test_status
	_test_output="$(teststage_setup; 2>&1 "${@:2}")"
	_test_result=$?
	if [ $_test_result == 0 ]; then
		_test_status="${_test_PASSED}"
	else
		_test_status="${_test_FAILED}"
	fi
	IFS=' ' printf '%s %s' "${2#test_}${1:+($1)}" "${_test_status}"
	if [ -n "${_test_output}" ]; then
		(IFS=$'\n'; printf ':\n'; printf '> %s\n' ${_test_output})
	else
		printf ".\n"
	fi

	if [ $_test_result == 0 ]; then
		(( ++_test_passedCount ))
	else
		(( ++_test_failedCount ))
	fi

	return $_test_result
}

teststage_proceed() {
	_test_runTestFunctions
	_test_setupTestStage
}

# this function is called before each test, overwrite to implement setup
teststage_setup() {
	:
}

_test_printfAndFail() {
	 1>&2 printf "$@"
	exit 1
}
